-- espstb (Drawing API ESP system)
-- Features: Chams, Names, Tracers, Boxes, Health Bars
-- Supports RGB color updates, team check, and whitelist

local ESP = {}
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- States
local states = {
    chams = false,
    names = false,
    tracers = false,
    boxes = false,
    healthbars = false,
    teamcheck = false,
    whitelist = false,
}

-- Colors
local colors = {
    chamsFill = Color3.fromRGB(0,200,255),
    chamsOutline = Color3.fromRGB(255,255,255),
    tracer = Color3.fromRGB(0,200,255),
    name = Color3.fromRGB(255,255,255),
    box = Color3.fromRGB(255,255,255),
    healthbar = Color3.fromRGB(0,255,0),
}

-- Data
local drawings = {}
local highlights = {}
local whitelist = {} -- fill with player.UserId you want to ignore

----------------------------------------------------------------
-- Utility
----------------------------------------------------------------
local function isFriend(plr)
    if not states.whitelist then return false end
    return whitelist[plr.UserId] == true
end

local function isSameTeam(plr)
    if not states.teamcheck then return false end
    if LocalPlayer.Team and plr.Team then
        return LocalPlayer.Team == plr.Team
    end
    return false
end

local function addHighlight(plr)
    if highlights[plr] then highlights[plr]:Destroy() end
    if plr.Character then
        local hl = Instance.new("Highlight")
        hl.FillColor = colors.chamsFill
        hl.OutlineColor = colors.chamsOutline
        hl.Adornee = plr.Character
        hl.Parent = plr.Character
        highlights[plr] = hl
    end
end

local function removeHighlight(plr)
    if highlights[plr] then highlights[plr]:Destroy() end
    highlights[plr] = nil
end

----------------------------------------------------------------
-- Drawing ESP
----------------------------------------------------------------
RunService.RenderStepped:Connect(function()
    for _, d in pairs(drawings) do d:Remove() end
    drawings = {}

    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("Head") then
            if isFriend(plr) or isSameTeam(plr) then continue end

            local root = plr.Character.HumanoidRootPart
            local hum = plr.Character:FindFirstChildOfClass("Humanoid")
            local head = plr.Character.Head

            local pos, onscreen = Camera:WorldToViewportPoint(head.Position)
            if not onscreen then continue end

            local function newDrawing(type, props)
                local d = Drawing.new(type)
                for k,v in pairs(props) do d[k] = v end
                table.insert(drawings, d)
                return d
            end

            -- Name
            if states.names then
                newDrawing("Text", {
                    Text = plr.Name,
                    Position = Vector2.new(pos.X, pos.Y - 20),
                    Color = colors.name,
                    Size = 16,
                    Center = true,
                    Outline = true,
                    Visible = true,
                })
            end

            -- Tracers
            if states.tracers then
                newDrawing("Line", {
                    From = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y),
                    To = Vector2.new(pos.X, pos.Y),
                    Color = colors.tracer,
                    Thickness = 1.5,
                    Visible = true,
                })
            end

            -- Boxes + Health
            if states.boxes or states.healthbars then
                local cframe = root.CFrame
                local size = Vector3.new(2, 3, 1.5)
                local corners = {
                    cframe * Vector3.new(-1, -2, -1),
                    cframe * Vector3.new(-1,  2, -1),
                    cframe * Vector3.new( 1,  2, -1),
                    cframe * Vector3.new( 1, -2, -1),
                    cframe * Vector3.new(-1, -2,  1),
                    cframe * Vector3.new(-1,  2,  1),
                    cframe * Vector3.new( 1,  2,  1),
                    cframe * Vector3.new( 1, -2,  1),
                }
                local screenCorners = {}
                for _, corner in ipairs(corners) do
                    local screenPos, vis = Camera:WorldToViewportPoint(corner)
                    table.insert(screenCorners, Vector2.new(screenPos.X, screenPos.Y))
                end
                local minX, minY = math.huge, math.huge
                local maxX, maxY = -math.huge, -math.huge
                for _, v in ipairs(screenCorners) do
                    minX = math.min(minX, v.X)
                    minY = math.min(minY, v.Y)
                    maxX = math.max(maxX, v.X)
                    maxY = math.max(maxY, v.Y)
                end
                if states.boxes then
                    newDrawing("Square", {
                        Position = Vector2.new(minX, minY),
                        Size = Vector2.new(maxX - minX, maxY - minY),
                        Color = colors.box,
                        Thickness = 1,
                        Filled = false,
                        Visible = true,
                    })
                end
                if states.healthbars and hum then
                    local hp = math.clamp(hum.Health / hum.MaxHealth, 0, 1)
                    local barHeight = (maxY - minY) * hp
                    newDrawing("Line", {
                        From = Vector2.new(minX - 5, maxY),
                        To = Vector2.new(minX - 5, maxY - barHeight),
                        Color = colors.healthbar,
                        Thickness = 3,
                        Visible = true,
                    })
                end
            end
        end
    end
end)

----------------------------------------------------------------
-- Toggle functions
----------------------------------------------------------------
function ESP:ToggleChams(state)
    states.chams = state ~= nil and state or not states.chams
    if states.chams then
        for _,plr in ipairs(Players:GetPlayers()) do
            if plr ~= LocalPlayer then addHighlight(plr) end
        end
    else
        for _,hl in pairs(highlights) do hl:Destroy() end
        highlights = {}
    end
    return states.chams
end

function ESP:ToggleNames(state)
    states.names = state ~= nil and state or not states.names
    return states.names
end

function ESP:ToggleTracers(state)
    states.tracers = state ~= nil and state or not states.tracers
    return states.tracers
end

function ESP:ToggleBoxes(state)
    states.boxes = state ~= nil and state or not states.boxes
    return states.boxes
end

function ESP:ToggleHealthBars(state)
    states.healthbars = state ~= nil and state or not states.healthbars
    return states.healthbars
end

function ESP:ToggleTeamCheck(state)
    states.teamcheck = state ~= nil and state or not states.teamcheck
    return states.teamcheck
end

function ESP:ToggleWhitelist(state)
    states.whitelist = state ~= nil and state or not states.whitelist
    return states.whitelist
end

----------------------------------------------------------------
-- Color setters
----------------------------------------------------------------
function ESP:SetChamsFillColor(c) colors.chamsFill = c for _,hl in pairs(highlights) do hl.FillColor = c end end
function ESP:SetChamsOutlineColor(c) colors.chamsOutline = c for _,hl in pairs(highlights) do hl.OutlineColor = c end end
function ESP:SetTracerColor(c) colors.tracer = c end
function ESP:SetNameColor(c) colors.name = c end
function ESP:SetBoxColor(c) colors.box = c end
function ESP:SetHealthbarColor(c) colors.healthbar = c end

----------------------------------------------------------------
-- Player connections
----------------------------------------------------------------
Players.PlayerAdded:Connect(function(plr)
    if states.chams then addHighlight(plr) end
end)
Players.PlayerRemoving:Connect(function(plr)
    removeHighlight(plr)
end)

return ESP
